Day1

CREATE TABLE driver_details(
driver_id INT PRIMARY KEY AUTO_INCREMENT,
driver_name VARCHAR(50) NOT NULL,
contact_no BIGINT(10) NOT NULL UNIQUE, 
license_number VARCHAR(50), 
date_of_registration DATE NOT NULL,
average_rating DECIMAL(2,1) NOT NULL
)
AUTO_INCREMENT=1001;


CREATE TABLE vehicle_details(
car_registration VARCHAR(50) PRIMARY KEY,
driver_id INT NOT NULL,
vehicle_model VARCHAR(50) NOT NULL,
vehicle_type VARCHAR(50) NOT NULL,
seating_capacity INT NOT NULL,
charges_per_hour DECIMAL(6,2) NOT NULL DEFAULT 0,
CONTRAINT driver_fk FOREIGN KEY (driver_id) REFERENCES driver_details (driver_id)
);


CREATE TABLE customer_details(
customer_id INT PRIMARY KEY AUTO_INCREMENT, 
customer_name VARCHAR(50) NOT NULL,
date_of_registration DATE NOT NULL,
customer_phone BIGINT(10) NOT NULL UNIQUE,
customer_address TEXT,
credit_points int NOT NULL DEFAULT 0,
wallet 	DECIMAL(6,2) DEFAULT 0
)
AUTO_INCREMENT=1;


CREATE TABLE booking_details(
booking_id VARCHAR(10) PRIMARY KEY,
customer_id INT NOT NULL,
driver_id INT NOT NULL,
date_of_booking TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
source VARCHAR(50) NOT NULL,
destination VARCHAR(50) NOT NULL,
type_of_travel ENUM('polo','solo') NOT NULL,
number_of_persons INT,
booking_status ENUM('waiting','travelling','completed','cancelled') NOT NULL DEFAULT 'waiting',
CONSTRAINT customer_fk FOREIGN KEY (customer_id) REFERENCES customer_details (customer_id),
CONSTRAINT driver_fk FOREIGN KEY (driver_id) REFERENCES driver_details (driver_id)
);


CREATE TABLE coupon_details(
coupon_code VARCHAR(50) PRIMARY KEY,
expiry_date DATE NOT NULL,
description TEXT,    	 
discount_percentage FLOAT NOT NULL
);


CREATE TABLE payment_details(
payment_id VARCHAR(10) PRIMARY KEY,
booking_id VARCHAR(10) NOT NULL,
journey_duration INT NOT NULL,
waiting_duration INT NOT NULL DEFAULT 0,
coupon_code VARCHAR(50),
fare DECIMAL(6,2) NOT NULL DEFAULT 0,
payment_type ENUM('cash','wallet','upi') NOT NULL DEFAULT 'wallet',
driver_rating FLOAT,
feedback TEXT,
CONSTRAINT booking_fk FOREIGN KEY (booking_id) REFERENCES booking_details(booking_id),
CONSTRAINT coupon_fk FOREIGN KEY (coupon_code) REFERENCES coupon_details (coupon_code)
);

-------------------------------------------------------------

DAY2

Exercise 8:
SELECT Prodid,Pdesc,Category,Discount 
FROM Product 
WHERE Pdesc IS NULL;

Exercise 9:
SELECT Prodid,Pdesc,Category,Discount 
FROM Product 
WHERE Category='Apparel' AND Discount>5;

Exercise 19:
UPDATE Product SET Price=50 
WHERE Category='Apparel' AND Pdesc='Trouser';

Exercise 20:
UPDATE Salesman SET Sname='Jenny',Location='Bristol' 
WHERE Sid=3;

Exercise 24:
SELECT Prodid,SUBSTR(Pdesc,1,5) AS PDESC_FIVE,category 
FROM Product;

Exercise 25:
SELECT COUNT(Saleid)AS SALE_COUNT
FROM Sale
WHERE MONTHS_BETWEEN(sysdate,Sldate)<40;

Exercise 26:
SELECT NVL(Pdesc,'No Description') AS PDESC,Discount 
FROM Product;

Exercise 27:
SELECT Prodid,Category,Price,Discount 
FROM Product 
ORDER BY Category DESC,Price ASC;

Exercise 10:
SELECT Prodid,Category,Discount 
FROM Product 
WHERE Category IN ('Sports','Apparel') 
ORDER BY Category,Discount;

Exercise 64:
SELECT COUNT(Qtyonhand) AS NOOFITEMS FROM Item;

Exercise 65:
SELECT Orderid, months_between(Orderdate,Pymtdate)"No of Months" 
FROM Orders;

Exercise 66:
SELECT SUM(Quotedprice) AS TotalPrice
FROM Quotation
WHERE TO_CHAR(Qdate,'MM')=06 and Qstatus='Accepted';

Exercise 11:
SELECT Prodid,SUM(Quantity) AS QTY_SOLD
FROM Saledetail
WHERE Quantity>1
GROUP BY Prodid
HAVING COUNT(Quantity)>1;

Exercise 41:
SELECT TO_CHAR(Qdate,'Month') AS MONTH,COUNT(Quotationid) AS QUOTATIONCOUNT
FROM Quotation
GROUP BY TO_CHAR(Qdate,'Month');

Exercise 46:
SELECT Pymtmode,COUNT(Orderid) AS PYMTCOUNT 
FROM Orders WHERE TO_CHAR(Pymtdate,'YYYY')<2015 
GROUP BY Pymtmode 
HAVING COUNT(*)>1;


***********************************
5,16,62 are wrong
Day 3

1.SELECT h.hotel name FROM hotel h INNER JOIN hotel_room_details r ON h.hotel_id=r.hotel_id where room_type="Deluxe Room AC";

2.SELECT SUM(r.room_price) FROM hotels h INNER JOIN hotel_room_details ON h.hotel id=r.hotel id GROUP BY h.hotel_id;

3.SELECT COUNT(b.booking id) FROM USER u INNER JOIN booking b ON u.user_email=b.booking user_email GROUP BY u.user_name HAVING b.booking_checkin=2017;

4.SELECT COUNT(r.room id) FROM hotel h inner join hotel_room_details ON h.hotel_id=r.hotel id WHERE r.room price<10000; 

5.SELECT H.hotel_name,B.booking_id FROM HOTEL H JOIN hotel_room_details R ON H.hotel_id=R.hotel_id RIGHT OUTER JOIN booking B ON R.room_id=B.booking_room_id B.booking_id IS NULL;


DBMS Part-1:

12: SELECT Sname FROM Quotation GROUP BY Sname HAVING AVG(Quotedprice)>500 AND Qstatus='Closed';

17:SELECT I.Itemcode, I.Descr, I.Category, Q.Quotedprice FROM Item I INNER JOIN Quotation Q ON I.Itemcode Q.Itemcode WHERE Q.Qstatus='Accepted';

Self Join, Outer Join:

Assignment 15:SELECT e.Ename, v.Vehiclename FROM Emp e LEFT JOIN Empvehicle ev ON e.Empno=ev.Empno LEFT JOIN Vehicle v ON ev.Vehicleid=v.Vehicleid;

Assignment 16: SELECT I.Itemcode,Descr,NVL(TO_CHAR(Qtyavailable),'N.A.') Qtyavailable FROM Item I LEFT OUTER JOIN Retailstock R1 ON R1.Itemcode=I.Itemcode AND R1.Roid='R1001';

Exercise 16: SELECT p1.prodid,p1.category, p2.price FROM Product p1 INNER JOIN Product p2 ON p1.prodid=p2.prodid WHERE pl.price=p2.price; ----> not working in oracle 

Exercise 18:No manager id column present...

Exercise 60: SELECT s.Sname FROM Salesman s INNER JOIN Sale sa ON s.sid=sa.sid GROUP BY s.sname HAVING COUNT(sa.saleid)>=2;

Exercise 62: SELECT sm.sid, sm.sname, sm.location FROM Salesman sm INNER JOIN Sale s ON sm.sid=s.sid INNER JOIN Saledetail sd ON s.saleid=sd.saleid INNER JOIN product p ON sd.prodid=p.prodid GROUP BY sm.sid HAVING SUM(p.price*sd.quantity;

Exercise 63: SELECT prodid, category, pdesc, price FROM Product WHERE price IN(SELECT MAX(price) FROM product group by category); 

Exercise 64: SELECT sm.sname FROM Salesman sm Left JOIN Sale s ON sm.sid=s.sid where s.saleid IS NULL;


Day 4

1.
select column_name, data_type from information_schema.columns where table_name ='coupon_details' and table_schema 'satyadb';

2.
select table_name, table_rows, auto_increment from information_schema.tables where

table_name 'vehicle_details' and table_schema = 'satyadb';

3.
select d.driver_name,d.average_rating from booking_details b join driver_details d on b.driver_id = d.driver_id where b.type_of_travel = 'solo';

4.
select c.customer_name from booking_details b join coupon_details c on b.customer_id = c.customer_id where c.coupon_code = 'happy hours offer';

5. 
select d.driver_name,count(b.customer_id) from booiking_details b join driver_details d on b.driver_id= d.driver_id where b.-vehicle_type = 'mini' and 'b.type_of_travel = 'pool' group by d.driver_id, d.driver_name;

6. SELECT c.customer_name
FROM customer_details c
JOIN booking_details b ON c.customer_id = b.customer_id
JOIN payment_details p ON b.booking_id = p.booking_id
WHERE p.coupon_code = 'Welcome offer'
ORDER BY p.journey_duration DESC
LIMIT 1;


7. SELECT b.booking_id
FROM booking_details b
JOIN customer_details c ON b.customer_id = c.customer_id
WHERE LOWER(c.customer_name) LIKE '%imb%';

8. SELECT v.vehicle_model
FROM vehicle_details v
JOIN driver_details d ON v.driver_id = d.driver_id
WHERE (SUBSTRING(d.license_number, 3, 1) = 'B' OR SUBSTRING(d.license_number, 3, 1) = 'G')
AND (SUBSTRING(d.license_number, 7, 1) = 'G' OR SUBSTRING(d.license_number, 7, 1) = 'P');

9.  SELECT d.driver_name
FROM driver_details d
JOIN booking_details b ON d.driver_id = b.driver_id
ORDER BY DATEDIFF(MAX(b.date_of_booking), d.date_of_registration) DESC
LIMIT 1;

10.  SELECT MONTHNAME(date_of_booking) AS booking_month, COUNT(*) AS total_bookings
FROM booking_details
GROUP BY booking_month
ORDER BY total_bookings DESC
LIMIT 1;

11.   SELECT c.customer_name, AVG(p.fare) AS avg_fare
FROM customer_details c
JOIN booking_details b ON c.customer_id = b.customer_id
JOIN payment_details p ON b.booking_id = p.booking_id
GROUP BY c.customer_id
ORDER BY avg_fare DESC
LIMIT 1;

12.  SELECT CONCAT(b.booking_id, '#', d.driver_name, '#', c.customer_name, '#', b.source, '#', b.destination, '#', b.booking_status) AS booking_info
FROM customer_details c
JOIN booking_details b ON c.customer_id = b.customer_id
JOIN driver_details d ON b.driver_id = d.driver_id
ORDER BY c.date_of_registration ASC, b.date_of_booking DESC
LIMIT 1;


13.  SELECT payment_type, coupon_code, SUM(fare) AS total_fare
FROM payment_details
GROUP BY payment_type, coupon_code;


14.  SELECT d.driver_id, d.driver_name
FROM driver_details d
JOIN booking_details b ON d.driver_id = b.driver_id
JOIN payment_details p ON b.booking_id = p.booking_id
GROUP BY d.driver_id
HAVING SUM(p.fare) < (SELECT AVG(fare) FROM payment_details);

15.  SELECT d.driver_name
FROM driver_details d
JOIN booking_details b ON d.driver_id = b.driver_id
JOIN payment_details p ON b.booking_id = p.booking_id
GROUP BY d.driver_id
ORDER BY SUM(p.fare) ASC
LIMIT 1;

16.  SELECT COUNT(*) AS total_bookings
FROM booking_details
WHERE date_of_booking >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);


17.  SELECT c.description, COUNT(p.coupon_code) AS total_users
FROM coupon_details c
JOIN payment_details p ON c.coupon_code = p.coupon_code
WHERE c.expiry_date BETWEEN CURDATE() AND LAST_DAY(DATE_ADD(CURDATE(), INTERVAL 1 MONTH))
GROUP BY c.coupon_code;


18.   SELECT d.driver_name, d.average_rating,
       CASE
           WHEN d.average_rating >= 4.7 THEN 'Best'
           WHEN d.average_rating BETWEEN 4.3 AND 4.6 THEN 'Good'
           WHEN d.average_rating BETWEEN 4.0 AND 4.2 THEN 'Above Average'
           WHEN d.average_rating BETWEEN 3.5 AND 3.9 THEN 'Average'
           ELSE NULL
       END AS category
FROM driver_details d
HAVING category IS NOT NULL;


19.  SELECT DISTINCT destination
FROM booking_details;

20. SELECT DISTINCT source
FROM booking_details
WHERE source NOT IN (SELECT DISTINCT destination FROM booking_details);

Day 6

Exercise 1:

Consider a "Customer" table as shown below:
CREATE TABLE Customer(
id int primary key, name varchar(18) not null, type enum("HighValue", "Valuable", "Regular") not null 
);

CREATE TABLE order(
id dt int primary key,
date not null, 
sustid int not null, 
itemid int not null, 
value int not null);

CREATE INDEX order dt idx ON order(dt);
SELECT value, dt FROM Order O
INNER JOIN Customer C ON O.custid C.id 
WHERE C.type "HighValue" ORDER BY dt DESC LIMIT 3;


Exercise 2:

create table author details(
author name varchar(250),
author city varchar(250),
author state varchar(250),
author_country varchar(250),
author phone bigint(50 ),
author email varchar(250));

partition by list columns(author_country) (
partition 0 author country IN ('United States', 'Italy', 'Norway', 'Brazil'), 
partition 1 author country IN ('China', 'India', 'Russia', 'Canada'),
partition 2 author country IN ('France', 'Sweaden, "Mexico', 'Japan'),
partition 3 author country IN ('Germany', United Kingdom', Austrailia', 'Netherlands');


Exercise 3 :

create table book details (
book id int(25), 
book_name varchar(250), 
author name varchar(250), 
book category varchar(250), 
publisher varchar(250), 
year of publishing int(10));

partition by range(year of publishing) (
partition p_2000 year of publishing less than (1980)
partition p 2010 year of publishing less than (2000) 
partition p_2020 year of publishing less than (2020)
partition p else year of publishing greater than equal to (2020));

DAY 7

1.
SELECT e.employee_id,first_name,last_name,e.department_id,department_name,salary,
RANK() over(PARTITION BY department_id ORDER BY salary DESC) as E_Rank
FROM employees e JOIN departments d ON e.department_id=d.department_id;

2.
SELECT e.employee_id,first_name,last_name,current_date_sale,prev_date_sale,((current_date_sale - prev_date_sale)/prev_date_sale)*100 as growth FROM (SELECT employee_id,first_name,last_name,sale as current_date_sale, LAG(sale) over (partition by employee_id order by date)as prev_date_sale FROM sales) as sales_with_previous_date;

3.
SELECT e.employee_id,first_name,last_name,sale_date,sales_amount,
SUM(sales_amount) over (PARTITION BY employee_id) as total_amount_sale
FROM employees e JOIN sales_performance s ON e.employee_id=s.employee_id;

4.
SELECT e.employee_id,sale_date,
SUM(sales_amount) over (PARTITION BY employee_id ORDER BY sale_date) as total_sale
FROM employees e JOIN sales_performance s ON e.employee_id=s.employee_id;


5.
SELECT e.employee_id,sale_date,sales_amount,
MAX(sales_amount) over (PARTITION BY employee_id) as max_sale_amount
FROM employees e JOIN sales_performance s ON e.employee_id=s.employee_id;
